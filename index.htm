<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="style2.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="icon" href="dp.png">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat+Alternates:ital,wght@0,400;1,300&display=swap" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Poppins&display=swap" rel="stylesheet">
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins&display=swap"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
</head>
<body>
    <!--Navbar-->
    <nav class="navbar navbar-expand-lg bg-secondary-subtle">
        <div class="container-fluid">
          <a class="navbar-brand" href="#">Sachin's Creation</a>
          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
              <li class="nav-item">
                <a class="nav-link active" aria-current="page" href="#">Home</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="https://www.linkedin.com/in/sachin-mhetre-382039233/">LinkedIn</a>
              </li>
              <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                  Content
                </a>
                <ul class="dropdown-menu">
                  <li><a class="dropdown-item" href="#arrays">Array</a></li>
                  <li><a class="dropdown-item" href="#sort">Sort</a></li>
                  <li><a class="dropdown-item" href="#twoDarray">2D Array</a></li>
                  <li><a class="dropdown-item" href="#String">Strings</a></li>
                  <li><a class="dropdown-item" href="#Bit_Manipulation">Bit Manipulation</a></li>
                  <li><a class="dropdown-item" href="#Recursion">Recursion</a></li>
                  <li><a class="dropdown-item" href="#Divide_Conquer">Divide and Conquer</a></li>
                  <li><hr class="dropdown-divider"></li>
                  <li><a class="dropdown-item" href="#">Something else here</a></li>
                </ul>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="https://github.com/SachinMhetre678?tab=repositories">Github</a>
              </li>
            </ul>
            <form class="d-flex" role="search">
              <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
              <button class="btn btn-outline-success" type="submit">Search</button>
            </form>
          </div>
        </div>
      </nav>
      <!-- Profile -->
    <div class="profile">
        <div class="description">
            <div class="box">
                <p>
                    🚀 Hey, I'm Sachin, a CSE student passionate about Java ☕️ and DSA 🔍. I love 
                    crafting clean code, solving algorithm puzzles, and embracing the power of tech to shape 
                    the future 🌐. Lifelong learner 📚 on a coding adventure! Let's connect and explore together! 👩‍💻✨
                </p>
            </div>
        </div>
        <div class="pic">
            <img src="user.jpeg">
        </div>
    </div>

    <!-- Main Content -->

    <div class="intro"> <h1>I am going to post Java + DSA Course that I studied </h1></div></br>
    <div id="maincontent">
        <h2 class="introduction" id="arrays">Arrays in Java:</h2><br/>
        <div class="array">
            <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                <img src="kadones_algo.png" alt="kadanes_algo">
                <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Arrays/Kadanes_Algo.java">Kadanes Algorithm</a></h4>
                <p>Implementing's Algorithm in Java: Discover the maximum subarray sum 
                    efficiently with this concise Java code. Ideal for understanding and solving problems
                    related to dynamic programming and array manipulation. Explore the power of algorithmic 
                    thinking and boost your programming skills! 💻🚀 #Java #Algorithms #Coding.
                </p>
            </div>
            <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                <img src="stocks.png" alt="stock_problem">
                <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Arrays/Stocks.java">Stock Problem</a></h4>
                <p>Maximize Your Profits: This Java code helps you find the best time to 
                    buy and sell stocks within a given set of prices over the last 5 days. 
                    Discover the optimal profit by identifying the lowest buying day and 
                    the highest selling day. Boost your trading decisions with this efficient 
                    stock algorithm! 💹📈 #Java #Stocks #Algorithm.
                </p>
            </div>
            <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                <img src="trapping_rainwater.png" alt="Trapping_Rainwater">
                <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Arrays/Trapping_Rainwater.java">Trapping Rainwater Problem</a></h4>
                <p>Rainwater Trapping Mastery: Unlock the solution to the classic problem of
                    trapping rainwater with this Java code. Using auxiliary arrays, it efficiently
                    calculates the trapped water between building heights. Elevate your problem-solving
                    skills with this elegant algorithm! 💧🏠 #Java #Algorithm #RainwaterTrapping.
                </p>
            </div>
        </div>
        <p><a href="https://github.com/SachinMhetre678/Java-DSA/tree/main/Arrays"> See More ...</a></p>
     </div>

     
     <h2 class="introduction" id="sort">Basic Sort in Java:</h2><br/>
        <div class="sort">
            <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                <img src="Bubble_sort.png" alt="Bubble_Sort">
                    <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Basics%20Sorting/bubblesort.java">Bubble Sort</a></h4>
                    <p>
                        Bubble Sort Basics: Uncover the simplicity of the Bubble Sort algorithm with this 
                        Java code. Watch as elements 'bubble' into their correct positions, making it easy 
                        to understand and implement. Perfect for beginners exploring sorting algorithms. 
                        Time Complexity: O(n^2), Space Complexity: O(N)
                        🧑‍💻🔄 #Java #BubbleSort #Algorithm.
                    </p>
            </div>
            <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                <img src="selection_sort.png" alt="Selection_Sort">
                    <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Basics%20Sorting/selectionsort.java">Selection Sort</a></h4>
                   <p>
                        Selection Sort Brilliance: Explore the Selection Sort algorithm with this Java code! 
                        Efficiently sorting elements by selecting the smallest and placing it in its correct 
                        position. Time Complexity: O(n^2), Space Complexity: O(1). Enhance your sorting skills
                         with this intuitive algorithm! 🧑‍💻🔍 #Java #SelectionSort #Algorithm.
                   </p>
            </div>
            <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                <img src="insertion_sort.png" alt="Insertion Sort">
                    <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Basics%20Sorting/insertionsort.java">Insertion Sort</a></h4>
                    <p>
                        Insertion Sort Insight: Dive into the world of Insertion Sort with this Java code! 
                        Seamlessly sorting elements by inserting each one into its proper place. 
                        Time Complexity: O(n^2), Space Complexity: O(1). Elevate your sorting game with this 
                        elegant and intuitive algorithm! 🧑‍💻📑 #Java #InsertionSort #Algorithm.
                    </p>
            </div>
            <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                <img src="Counting_Sort.png" alt="Counting_Sort">
                <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Basics%20Sorting/countingsort.java">Counting Sort</a></h4>
                <p>
                Counting Sort Mastery: Unleash the power of Counting Sort with this Java code! Effortlessly 
                sorting elements by counting occurrences and determining their positions. Time Complexity: O(n + k), 
                Space Complexity: O(k), where 'k' is the range of input values. Level up your sorting skills with this
                efficient algorithm! 🧑‍💻📊 #Java #CountingSort #Algorithm.
                </p>
            </div>
        </div>
        <p><a href="https://github.com/SachinMhetre678/Java-DSA/tree/main/Basics%20Sorting"> See More ...</a></p>


        <h2  id="twoDarray" class="introduction">2D Array in Java:</h2><br/>
            <div class="twoDarray">
                <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                    <img src="Diagonal_Sum.png" alt="Diagonal_Sum_Problem">
                    <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/2D%20Arrays/diagonalSum.java">Diagonal Sum Problem</a></h4>
                    <p>
                        Diagonal Sum Delight: Compute the sum of both primary and secondary diagonals in a 2D array
                         effortlessly with this Java code. Optimized for efficiency, it sums up diagonal elements 
                         with a clear and concise approach. Time Complexity: O(n), Space Complexity: O(1). Elevate
                          your matrix manipulation skills with this elegant algorithm! 🧑‍💻🔢 #Java #MatrixManipulation #DiagonalSum
                    </p>
                </div>
                <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                    <img src="Spiral_Matrix_Print.png" alt="Spiarl_Matrix_print_Problem">
                    <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/2D%20Arrays/spiralmatrix.java">Spiarl Matrix print Problem</a></h4>
                    <p>
                        Spiral Matrix Magic: Print the elements of a 2D matrix in a spiral pattern with this Java code. 
                        An elegant approach to traverse and display matrix elements in a visually appealing spiral order. 
                        Time Complexity: O(m * n), Space Complexity: O(1). Elevate your matrix manipulation skills with 
                        this algorithmic gem! 🧑‍💻🔄 #Java #SpiralMatrix #Algorithm.
                    </p>
                </div>
                <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                    <img src="StairCase_Search.png">
                    <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/2D%20Arrays/staircaseSearch.java">StairCase Search</a></h4>
                    <p>
                        Staircase Search Success: Efficiently locate a key in a staircase-like 2D matrix with this Java code. 
                        Navigate through rows and columns strategically to swiftly find the desired element. 
                        Time Complexity: O(m + n), Space Complexity: O(1). Elevate your search algorithm skills with this intuitive 
                        approach! 🧑‍💻🔍 #Java #SearchAlgorithm #StaircaseSearch.
                    </p>
                </div>
            </div>
        <p><a href="https://github.com/SachinMhetre678/Java-DSA/tree/main/2D%20Arrays"> See More ...</a></p>


        <h2  id="String" class="introduction">Strings in Java:</h2><br/>
            <div class="string">
                <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                    <img src="Shortest_path.png" alt="shortest path using strings">
                    <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Strings/Shortest_Path.java">Shortest Path</a></h4>
                    <p>
                        Embark on a journey through a 2D plane using a series of directions (N, S, E, W) with this Java code! 
                        🗺️ Calculate the shortest path to reach your destination using the displacement formula. 🚀 Ideal for 
                        understanding basic navigation and mathematical calculations in programming. 🧭💻 #Java #Navigation #Algorithm
                    </p>
                </div>
                <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                    <img src="convert_uppercase_to_lowercase.png" alt="Convert letter Uppercase to Lowercase">
                    <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Strings/Convert_first_letter_to_Uppercase.java">Convert letter Uppercase to Lowercase</a></h4>
                    <p>
                        Elevate the style of your text with this Java code! 🌟✨ Capitalize the first letter of each word in a sentence,
                        creating a polished and professional look. Perfect for enhancing user interfaces and presenting clean, well-formatted 
                        content. 💻🔤 #Java #StringManipulation #TextFormatting
                    </p>
                </div>
                <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                    <img src="Largest_String.png" alt="Largest String using String">
                    <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Strings/Largest_String.java">Check Largest String </a></h4>
                    <p>
                        Delve into lexicographic comparison with this Java code! 🧐 Compare an array of strings and find the 
                        lexicographically largest one. Ideal for sorting words or identifying the highest value in alphabetical 
                        order. Boost your string-handling skills with this efficient and straightforward algorithm! 💻🔤 #Java 
                        #StringComparison #LexicographicOrder 
                    </p>
                </div>
                <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                    <img src="String Compression.png" alt="String Compression">
                    <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Strings/String_Comparession.java">String Compression</a></h4>
                    <p>
                        Efficiently compress strings with this Java code! 🚀🔤 Given a string, it counts consecutive repeated 
                        characters and represents them in a compressed format. Ideal for reducing redundancy in data or storage
                         optimization. Enhance your string manipulation skills with this handy compression algorithm! 💻📉 #Java 
                         #StringCompression #Algorithm
                    </p>
                </div>
            </div>
            <p><a href="https://github.com/SachinMhetre678/Java-DSA/tree/main/Strings">See More...</a></p>

        <!-- Bit Manipulation -->
        <h2  id="Bit_Manipulation" class="introduction">Bit Manipulation in Java:</h2><br/>
            <div class="bit_manipulation">
                <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                    <img src="alloperation.png" alt="ALL Operation of Bit Manipulation">
                    <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Bit Manipulation/All_Operation.java">All Operation</a></h4>
                    <p>
                        Perform bitwise operations with this Java code! 💻🔍 It includes functions to check if a number is odd
                         or even, get the value of a specific bit, set/clear/update a bit, clear a range of bits, and calculate 
                         fast exponentiation. Explore the world of bitwise manipulation and optimize your algorithms with these 
                         efficient operations! 🚀🔢 #Java #BitManipulation #Algorithm
                    </p>
                </div>
                <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                <img src="Odd_Even.png" alt="Finding Odd and even using Bit Manipulation">
                <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Bit Manipulation/All_Operation.java">Find Odd and Even</a></h4>
                <p>
                    Determine if a number is odd or even using bitwise operations! 🤖🔍 This Java code uses a bit mask to check 
                    the least significant bit (LSB), providing a fast and efficient method for odd/even classification. Enhance 
                    your understanding of bitwise manipulation for quick parity checks! 🚀🔢 #Java #BitManipulation #OddOrEven
                </p>
               </div>
                <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                <img src="FastExpo.png" alt="Caluclation expo fast">
                <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Bit Manipulation/All_Operation.java">Calculate Exponential</a></h4>
                <p>
                    Accelerate your exponential calculations with this Java code! ⚡💡 Using bitwise manipulation, this algorithm 
                    efficiently computes the exponentiation of a number. The code exploits the binary representation of the exponent, 
                    making it faster and more resource-effective. Boost your understanding of bitwise operations and expedite your 
                    exponential computations! 🚀🔢 #Java #BitManipulation #ExponentialCalculation
                </p>
            </div>
         </div>
        <p><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Bit Manipulation/All_Operation.java">See More...</a></p></button>

        <h2  id="Recursion" class="introduction">Basics Recursion in Java:</h2><br/>
           <div class="Recursion">
            <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                <img src="Removes_Duplicate.png" alt="Remove Duplicate">
                <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Recursion%20Basics/Remove_Duplicate.java">Remove Duplicate in String</a></h4>
                <p>
                    This Java function, removeDuplicates, employs a clever approach to sift through a string and create a new string without
                    duplicate characters. 🧹✨ The magic lies in the recursive exploration of each character and the use of a boolean map 
                    to keep track of encountered elements. Bid farewell to duplicates and revel in the charm of unique strings! 🎉🔤 #Java #Recursion #StringManipulation
                </p>
            </div>
            <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                <img src="Tilling Problem.png" alt="Tilling Problem">
                <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Recursion%20Basics/tilling_Problem.java">Tilling Problem</a></h4>
                <p>
                    This Java function, tillingProblem, tackles the challenge of tiling a 2 x n floor using 2 x 1 tiles. 🏠✨ The key lies 
                    in recursive exploration, considering both vertical and horizontal choices. The base case handles the simplicity of an 
                    empty floor or a single column, while the recursive calls delve into the myriad ways to fill the given floor size. Dive 
                    into the world of possibilities and explore the art of tiling with this algorithm! 💡🔢 #Java #Recursion #TilingProblem
                </p>
            </div>
            <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                <img src="friend Pairing.png" alt="fried Pairing">
                <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Recursion%20Basics/Friends_Pairing.java">Friend Pairing Problem</a></h4>
                <p>
                    Embark on a journey of friendship pairing with this Java function, friendsPairing! 🚀👫 Whether solo or in pairs, friends 
                    find unique ways to come together. This algorithm explores the possibilities of friends pairing up, considering the choices 
                    of going solo or forming pairs. The recursive approach gracefully calculates the total ways friends can join hands on a given 
                    occasion. Dive into the world of recursive friendships and unravel the magic of pairings! 💫🔢 #Java #Recursion #FriendPairing
                </p>
            </div>
            <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                <img src="print binString.png" alt="Print Binary String">
                <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Recursion Basics/Bin_String.java">Crafting Binary Strings with Constraints</a></h4>
                <p>
                    Unleash the power of recursion with this Java function, printBinStrings! 🚀✨ This code ingeniously generates binary strings 
                    of length 'n' while ensuring that no consecutive '1's appear. The recursive approach explores the possibilities, making it an 
                    elegant solution for crafting binary strings with unique constraints. Dive into the world of binary compositions and witness 
                    the magic of constraint-based string generation! 💡🔢 #Java #Recursion #BinaryStrings
                </p>
            </div>
          </div>  
          <p><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Recursion Basics/Bin_String.java">See More...</a></p>


        <h2  id="Divide_Conquer" class="introduction">Divide and Conquer in Java:</h2><br/>
            <div class="divide_conquer">
                <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                    <img src="merge sort.png" alt="Merge Sort">
                    <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Recursion Basics/Bin_String.java">Merge Sort</a></h4>
                    <p>
                        Embark on a journey of sorting elegance with the mergeSort function in Java! This code snippet leverages the power of divide 
                        and conquer to efficiently sort an array. The merge method gracefully merges two sorted parts, creating a harmonious symphony 
                        of order. Experience the beauty of merge sort as it orchestrates elements with precision, ensuring a sorted array in the end. 
                        🌐🚀 #Java #MergeSort #Algorithm
                    </p>
                </div>
                <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                    <img src="quick sort.png" alt="Quick Sort">
                    <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Recursion Basics/Bin_String.java">Quick Sort</a></h4>
                    <p>
                        Experience the rapidity of sorting with the quickSort function in Java! This code snippet embraces the efficiency of the quicksort 
                        algorithm, where the pivot (chosen as the last element) orchestrates a swift arrangement of elements. The partition method skillfully 
                        divides the array, creating a seamless dance of sorting elements. Watch as this algorithm elegantly navigates through the array, bringing 
                        order with each recursive call. 🌐🚀 #Java #QuickSort #Algorithm
                    </p>
                </div>
                <div class="card" style="border: 2px solid black; border-radius: 0.625rem;">
                    <img src="rotated search array.png" alt="rotated search array">
                    <h4><a href="https://github.com/SachinMhetre678/Java-DSA/blob/main/Recursion Basics/Bin_String.java">Rotated Search Array</a></h4>
                    <p>
                        Embark on a quest to uncover the index of a target element in a rotated sorted array with the search method. This Java code employs 
                        both recursive and iterative approaches, gracefully navigating through the array to reveal the sought-after treasure. Whether using 
                        the magic of recursion or the dance of iteration, this algorithm swiftly pinpoints the target element, providing you with the key to 
                        the array's secrets. 🌌🎯 #Java #BinarySearch #Algorithm
                    </p>
                </div>
            </div>
            <p><a href="https://github.com/SachinMhetre678/Java-DSA/tree/main/Divde_and_Conquer">See More...</a></p>
     </div>  <!--main content -->
</body>
</html>